In the enchanted kingdom of puzzles and riddles, Princess Elara has entrusted her loyal companion, Prince Liam, with a magical challenge. Legend has it that within the kingdom exists a mystical 
set of numbers known as "Enchanted Numbers." These special numbers possess a unique property – they can be transformed using a secret formula.

Prince Liam's mission is to craft an algorithm that can distinguish these Enchanted Numbers from the ordinary ones. The magical process begins with any positive integer. Following a specific incantation, 
the number is replaced repeatedly with the sum of the squares of its digits. This enchanting ritual continues until the number either transforms into the revered number 1, becoming an Enchanted Number, 
or falls into a mysterious cycle, excluding the crave 1.

With the princess's trust in his abilities and the support of his loyal advisors (that's you!). Your invaluable guidance and wisdom are the beacon that illuminates his path, helping him unravel the secrets 
of these Enchanted Numbers. Together, you and Prince Liam venture into the realm of numbers and magic, where friendship and teamwork are the keys to unlocking the kingdom's most mysterious numerical secrets.

Input Format
The first line contains a positive integer n, representing the number to be checked as an Enchanted Number.

Output Format
Prince Liam needs to return 1 if it’s Enchanted Number and 0 if its not  an Enchanted Number.

Constraints
1 <= n <= 2^31 - 1

Sample Testcase 0
Testcase Input
18
Testcase Output
0









************************************************************************************************************************************************************************************











import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Main {

    private static int cal(int n){
        int sum = 0;
        while(n>0){
            int rem = n%10;
            sum += (rem*rem);
            n = n/10;
        }
        return sum;
    }

    private static boolean helper(int n, HashMap<Integer,Integer> mp){
        if(n==1){
            return true;
        }
        int newnum = cal(n);
        if(mp.containsKey(newnum)){
            return false;
        }
        mp.put(newnum,mp.getOrDefault(newnum,0)+1);
        return helper(newnum,mp);
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        HashMap<Integer,Integer> mp = new HashMap<>();
        if(helper(n,mp)){
            System.out.println(1);
        }
        else{
            System.out.println(0);
        }
        
    }
}
